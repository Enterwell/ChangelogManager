# Variables
env:
  ROOT_PATH: ./
  CLM_PATH: Enterwell.CI.Changelog
  CC_PATH: Enterwell.CI.Changelog.CLI

on:
  workflow_call:
    secrets:
      GH_PAT:
        required: true

jobs:
  # Check for changes
  check-changes:
    uses: './.github/workflows/check-changes.yml'
    with:
      ROOT_PATH: ./
    secrets:
      GH_PAT: ${{ secrets.GH_PAT }}

  # Release
  release:
    needs: check-changes
    runs-on: ubuntu-latest
    name: Release rest of the repository
    if: needs.check-changes.outputs.has_changes == 'true'

    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      # Bump version and update changelog
      - name: Bump version and update changelog
        id: version-bump
        uses: Enterwell/ChangelogManager-GitHub-Action@v3
        with:
          should-bump-version: true
          path-to-project-file: Enterwell.CI.Changelog/Enterwell.CI.Changelog.csproj
      
      # Committing new changes
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          pull: '--rebase --autostash'
          default_author: github_actions
          message: "[skip ci] [version-bump] Automated commit for version ${{ steps.version-bump.outputs.bumped-semantic-version }}"

      # Using .NET 8 for publishing the .NET 8 projects
      - name: Use .NET 8.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Packaging Changelog Manager CLI Tool (CLM)
      - name: Package Changelog Manager CLI Tool (CLM)
        working-directory: ${{ env.CLM_PATH }}
        run: |
          dotnet publish -c release -r win-x64 -o publish/win
          dotnet publish -c release -r osx-x64 -o publish/osx
          dotnet publish -c release -r linux-x64 -o publish/linux

          zip -j clm-win-x64.zip publish/win/*
          zip -j clm-osx-x64.zip publish/osx/*
          zip -j clm-linux-x64.zip publish/linux/*

      # Packaging Changelog Create CLI Tool (CC)
      - name: Package Changelog Create CLI Tool (CC)
        working-directory: ${{ env.CC_PATH }}
        run: |
          dotnet publish -c release -r win-x64 -o publish/win
          dotnet publish -c release -r osx-x64 -o publish/osx
          dotnet publish -c release -r linux-x64 -o publish/linux

          zip -j cc-win-x64.zip publish/win/*
          zip -j cc-osx-x64.zip publish/osx/*
          zip -j cc-linux-x64.zip publish/linux/*

      # Update Git tags
      - name: Git tags update
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git tag "v${{ steps.version-bump.outputs.bumped-semantic-version }}"
          git tag -f "v${{ steps.version-bump.outputs.bumped-major-part }}" "v${{ steps.version-bump.outputs.bumped-semantic-version }}"
          git tag -f "v${{ steps.version-bump.outputs.bumped-major-part }}.${{ steps.version-bump.outputs.bumped-minor-part }}" "v${{ steps.version-bump.outputs.bumped-semantic-version }}"

          git push -f --tags

      # Creating latest release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version-bump.outputs.bumped-semantic-version }}
          token: ${{ secrets.GH_PAT }}
          body: |
            ${{ steps.version-bump.outputs.new-changes }}

            | File | Description |
            |-----|--------------|
            | cc | Changelog Create (CLI for creating change entries) |
            | clm | Changelog Manager (CLI for merging changes to changelog.md) |

            Please see `README.md` for each project for usage instructions and examples.

            *Please note `cc` and `clm` binaries are built as standalone single file executables so they don't require specific .NET installed on machine and have larger than usual file sizes for that reason.*
          files: |
            ${{ env.CLM_PATH }}/clm-linux-x64.zip
            ${{ env.CLM_PATH }}/clm-osx-x64.zip
            ${{ env.CLM_PATH }}/clm-win-x64.zip
            ${{ env.CC_PATH }}/cc-linux-x64.zip
            ${{ env.CC_PATH }}/cc-osx-x64.zip
            ${{ env.CC_PATH }}/cc-win-x64.zip
